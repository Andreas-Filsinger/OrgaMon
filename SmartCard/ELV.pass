{
  |      ___                  __  __
  |     / _ \ _ __ __ _  __ _|  \/  | ___  _ __
  |    | | | | '__/ _` |/ _` | |\/| |/ _ \| '_ \
  |    | |_| | | | (_| | (_| | |  | | (_) | | | |
  |     \___/|_|  \__, |\__,_|_|  |_|\___/|_| |_|
  |               |___/
  |
  |    Copyright (C) 2014  Andreas Filsinger
  |
  |    This program is free software: you can redistribute it and/or modify
  |    it under the terms of the GNU General Public License as published by
  |    the Free Software Foundation, either version 3 of the License, or
  |    (at your option) any later version.
  |
  |    This program is distributed in the hope that it will be useful,
  |    but WITHOUT ANY WARRANTY; without even the implied warranty of
  |    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  |    GNU General Public License for more details.
  |
  |    You should have received a copy of the GNU General Public License
  |    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  |
  |    http://orgamon.org/
  |
}


//
// Lese "BLZ", "Kartennummer", "Kontonummer", "Gültig bis" von einer EC-Karte via PC/SC
//

var
 BLZ, KontoNummer, KarteNr, GueltigBis : string;

function SendAPDU(APDU: string; var DataOut: TBuffer): Boolean;
var
  erg: Integer;
  SW12: Word;
begin
  erg := TransmitAsStringSW(APDU, DataOut, SW12);
  Result := (erg = 0) and (SW12 = $9000);
end;

var
  s: string;
  DataOut: TBuffer;
  n : Integer;
begin
 BLZ := '';
 KontoNummer := '';
 KarteNr := '';
 GueltigBis := '';


 if ConnectCard = 0 then

  try

   WriteLn('ATR: '+GetCardATRasString);

 // MF
 if not SendAPDU('00a40000023f0000', DataOut) then
   WriteLn ('Error');

  // EF_BOERSE
 if not SendAPDU('00a404000ba00000005950414345010000', DataOut) then
   WriteLn ('Error');

 // READ record cc.1
 if not SendAPDU('00b201cc00', DataOut) then
   WriteLn ('Error');
 BLZ := copy(BCDBufferToDecString(DataOut),3,8);

 WriteLn('BLZ: ' + BLZ);

 { Zukünftig IBAN lesen, kenne aber die Kodierung nicht
 // raise Sec level?
 // 0x00, 0x22,            (byte) 0xf3, 0x02
  if not SendAPDU('0022f302', DataOut) then
    WriteLn ('Error');
  if not SendAPDU('00b201a400', DataOut) then
   WriteLn ('Error');
      WriteLn('IBAN: '+HexStringToASCIIString(BufferToHexString(DataOut)));
      WriteLn('IBAN: ' + BCDBufferToDecString(DataOut));
      WriteLn('IBAN: ' + BufferToASCIIString(DataOut));
      WriteLn('IBAN: ' + BufferToDecString(DataOut,' '));
 }

 // MF
 if not SendAPDU('00a40000023f0000', DataOut) then
   WriteLn ('Error');

 // Datei wählen
 if not SendAPDU('00a4040007a000000004306000', DataOut) then
   WriteLn ('Error');

 for n := 1 to 16 do
 begin
  WriteLn('================================================================================');
  if not SendAPDU('00b2' + IntToStrF(n, 2, '0') + '0c00', DataOut) then
  begin
   WriteLn('Error at record '+IntToStr(n));
   Break;
  end;
  s := BCDBufferToDecString(DataOut);
  WriteLn(IntToStrF(n, 2, ' ') + ' : ' + s + ' ('+IntToStr(length(s))+' bytes)');
  if length(s) = 94 then
  begin
   GueltigBis := copy(s, 14, 2) + '.' + copy(s, 12, 2) + '.' + copy(s, 10, 2);
   WriteLn('Gültig bis: ' + GueltigBis);

   KontoNummer := copy(s, 26, 10);
   WriteLn('Account: ' + KontoNummer);
   Break;
  end;
 end;

 // Karten Nummer
 if SendAPDU('00b201bc00', DataOut) then
 begin
   s := BCDBufferToDecString(DataOut);
   KarteNr := copy(s, 9, 11);
   WriteLn('KarteNr: ' + KarteNr);
 end;

  finally
    Disconnect;
    WriteLn('BLZ;KontoNummer;KarteNr;GueltigBis');
    WriteLn(BLZ+';'+KontoNummer+';'+KarteNr+';'+GueltigBis);
  end;
end.
