unit PersonenExport;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  IB_Components, HebuData, ComCtrls, StdCtrls;

type
  TFormPersonenExport = class(TForm)
    IB_Query1: TIB_Query;
    IB_Query2: TIB_Query;
    GroupBox1: TGroupBox;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Button1: TButton;
    ProgressBar1: TProgressBar;
    CheckBox1: TCheckBox;
    Edit2: TEdit;
    CheckBox2: TCheckBox;
    CheckBox3: TCheckBox;
    CheckBox4: TCheckBox;
    IB_Query3: TIB_Query;
    Label4: TLabel;
    CheckBox5: TCheckBox;
    procedure Button1Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure Edit2Exit(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  private
    { Private-Deklarationen }
  public
    { Public-Deklarationen }
    UserBreak: boolean;
    InsideExport: boolean;
  end;

var
  FormPersonenExport: TFormPersonenExport;

implementation

uses
  anfix32, globals;

{$R *.DFM}

procedure TFormPersonenExport.Button1Click(Sender: TObject);
var
  StartTime: dword;
  ExportStrings: TStringList;
  FullMemo: TStringList;
  DoppelteNamen: TStringList;
  DoppelteNamenInfo: TStringList;

  DoppelteNamenOrt: TStringList;
  DoppelteNamenInfoOrt: TStringList;
  KontaktSoll: TDateTime;
  AlteAdressen: TStringList;

  MailingNein: TStringList;
  LandNein: TStringList;
  KontaktNein: TStringList;
  RechnungNein: TStringList;
  debugStrings: TStringList;

  OutStr: string;
  _Firma: string;
  _anrede: string;
  _Name: string;
  _strasse: string;
  _ort: string;
  RecordsByNow: integer;
  _lookat: integer;

  _land_sub: string;
  _plz_sub: string;
  _ort_sub: string;
  _nummer: string;
  _ansprache: string;
  _NachName: string;
  _MailingTrueSet: boolean;
  ErrorCount: integer;
  ExportPermission: boolean;
  n: integer;

  function NoSemi(const s: string): string;
  begin
    result := s;
    ersetze(';', ',', result);
  end;

  function btojn(b: boolean): string;
  begin
    if b then
      result := 'JA'
    else
      result := 'NEIN'
  end;

begin
  if InsideExport then
  begin
    UserBreak := true;
    InsideExport := false;
  end else
  begin
    AlteAdressen := TStringList.create;

    if CheckBox5.Checked then
    begin
   // land muss immer dabei sein
      CheckBox3.checked := true;
      AlteAdressen.LoadFromFile(MyProgramPath + 'Mailing\AdressenGesamt.txt');
      AlteAdressen.sort;
      AlteAdressen.sorted := true;
    end;

    if CheckBox1.Checked then
      KontaktSoll := LongtodateTime(date2long(edit2.Text));
    Button1.Caption := 'Abbruch';
    ExportStrings := TStringList.create;
    FullMemo := TStringList.create;
    MailingNein := TStringList.create;
    LandNein := TStringList.create;
    KontaktNein := TStringList.create;
    RechnungNein := TStringList.create;
    debugStrings := TStringList.create;

    DoppelteNamen := TStringList.create;
    DoppelteNamenInfo := TStringList.create;
    DoppelteNamenOrt := TStringList.create;
    DoppelteNamenInfoOrt := TStringList.create;
    InsideExport := true;
    UserBreak := false;
    StartTime := 0;
    RecordsByNow := 0;
    ErrorCount := 0;
    IB_Query1.Open;
    IB_Query2.Open;
    IB_Query3.Open;
    with IB_query1 do
    begin
      label1.caption := inttostr(RecordCount);
      progressbar1.position := 0;
      progressbar1.Max := RecordCount;
      first;
      while not (eof) do
      begin
        inc(RecordsByNow);

        _nummer := inttostr(FieldByName('NUMMER').AsInteger);
        _name := cutblank(FieldByName('VORNAME').AsString + ' ' + FieldByName('NACHNAME').AsString);
        _NachName := FieldByName('NACHNAME').AsString;
        _lookat := FieldByName('PRIV_ANSCHRIFT_R').AsInteger;

        FieldByName('BEMERKUNG').Assignto(FullMemo);
        _anrede := cutblank(FullMemo.values['ANREDE']);

        _MailingTrueSet := (FieldByName('MAILING').AsString = 'J');

        repeat

          if (_Anrede = 'Herrn') and (_NachName <> '') then
          begin
            _ansprache := 'Sehr geehrter Herr ' + _NachName;
            break;
          end;

          if (_Anrede = 'Frau') and (_NachName <> '') then
          begin
            _ansprache := 'Sehr geehrte Frau ' + _NachName;
            break;
          end;

          _ansprache := 'Liebe Musikfreunde'

        until true;

    // fetch the Adress-Block!
        IB_Query2.parambyname('CROSSREF').AsInteger := _lookat;

        if IB_Query2.IsEmpty then
        begin
          inc(ErrorCount);
        end else
        begin

          with IB_Query2 do
          begin
            _firma := FieldByName('NAME1').AsString;
            _strasse := FieldByName('STRASSE').AsString;
            _land_sub := noblank(FieldByName('STATE').AsString);
            _plz_sub := inttostr(FieldBYName('PLZ').AsInteger);
            _ort_sub := FieldByName('ORT').AsString;

            if cutblank(_name) <> '' then
            begin
              DoppelteNamen.add(_name);
              DoppelteNamenOrt.add(_name + ' ' + _ort_sub);
            end;

            if _land_sub = 'D-' then
              _plz_sub := fill('0', 5 - length(_plz_sub)) + _plz_sub;
            _ort := _land_sub +
              _plz_sub + ' ' +
              _ort_sub;
          end;

          Outstr := NoSemi(_ort) + ';' +
            NoSemi(_Firma) + ';' +
            NoSemi(_anrede) + ';' +
            NoSemi(_Name) + ';' +
            NoSemi(_strasse) + ';' +
            _nummer + ';' +
            _Ansprache;

     // ************************************************************
     // hier Bedingungen prüfen
     // ************************************************************

          ExportPermission := true;
          repeat

      // Länder
            if CheckBox3.Checked then
            begin
              repeat
                if _land_sub = 'D-' then
                  break;
                if _land_sub = 'A-' then
                  break;
                if _land_sub = 'CH-' then
                  break;
                if _land_sub = '' then
                  break;
                ExportPermission := false;
                LandNein.add(OutStr);
              until true;
            end;

            if CheckBox5.Checked and ExportPermission then
            begin
              if AlteAdressen.indexof(OutStr) = -1 then
              begin
        // nicht gefunden -> also geändert!
                DebugStrings.add('*;' + OutStr);
                IB_Query1.Edit;
                IB_Query1.Post;
              end else
              begin
                DebugStrings.add('=;' + OutStr);
              end;
            end;

      // Mailing
            if CheckBox2.Checked then
              if not (_MailingTrueSet) then
              begin
                ExportPermission := false;
                MailingNein.add(OutStr);
              end;

      // Rechnungsempfänger
            if CheckBox4.Checked then
              if (IB_query1.FieldByName('RECHNUNGSEMPFAENGER').AsString = 'J') then
              begin
                ExportPermission := false;
                RechnungNein.add(OutStr);
              end;

      // Kontakt
            if checkBox1.Checked then
            begin
              repeat

        // ANLAGE
                if IB_Query1.FieldByName('EINTRAG').AsDate >= KontaktSoll then
                  break;

        // ADRESSÄNDERUNG
                if not (IB_Query1.FieldByName('LETZTEAENDERUNG').IsNull) then
                  if IB_Query1.FieldByName('LETZTEAENDERUNG').AsDate >= KontaktSoll then
                    break;

        // VERKAUFSBELEG
                IB_Query3.ParamByName('CROSSREF').AsInteger := IB_Query1.FieldByName('RID').AsInteger;
                if not (IB_Query3.IsEmpty) then
                begin
                  DebugStrings.add('-' + IB_Query1.FieldByName('RID').AsString);
                  IB_Query3.first;
                  while not (IB_Query3.eof) do
                  begin
                    DebugStrings.add(IB_Query3.FieldByName('ANLAGE').AsString + ' ' +
                      btojn(IB_Query3.FieldByName('ANLAGE').AsDate >= KontaktSoll));
                    IB_Query3.next;
                  end;
                  IB_Query3.first;
                  if IB_Query3.FieldByName('ANLAGE').AsDate >= KontaktSoll then
                    break;
                end;

                ExportPermission := false;
                KontaktNein.Add(OutStr);
              until true;

            end;

          until true;

          if ExportPermission then
            ExportStrings.add(OutStr);

        end;
        next;
        if frequently(StartTime, 400) or eof then
        begin
          label2.caption := inttostr(RecordsByNow);
          label3.caption := inttostr(ExportStrings.count);
          progressbar1.position := RecordsByNow;
          application.processmessages;
          if Userbreak then
            break;
        end;
      end;
    end;

    IB_Query1.Close;
    IB_Query2.Close;
    IB_Query3.Close;

    screen.cursor := crHourGlass;

    ExportStrings.sort;
    ExportStrings.SaveToFile(MyProgramPath + 'Mailing\Adressen.txt');
    ExportStrings.free;

    MailingNein.sort;
    MailingNein.SaveToFile(MyProgramPath + 'Mailing\Aussortiert wegen Mailing.txt');
    MailingNein.free;

    LandNein.sort;
    LandNein.SaveToFile(MyProgramPath + 'Mailing\Aussortiert wegen Land.txt');
    LandNein.free;

    KontaktNein.Sort;
    KontaktNein.SaveToFile(MyProgramPath + 'Mailing\Aussortiert wegen Kontakt.txt');
    KontaktNein.free;

    RechnungNein.sort;
    RechnungNein.SaveToFile(MyProgramPath + 'Mailing\Aussortiert wegen Rechnungsempfänger.txt');
    RechnungNein.free;

    DoppelteNamen.sort;
    RemoveDuplicates(DoppelteNamen, n, DoppelteNamenInfo);

    DoppelteNamenInfo.SaveToFile(MyProgramPath + 'Mailing\DoppelteNamen.txt');

    DoppelteNamenOrt.sort;
    RemoveDuplicates(DoppelteNamenOrt, n, DoppelteNamenInfoOrt);

    DoppelteNamenInfoOrt.SaveToFile(MyProgramPath + 'Mailing\DoppelteNamenOrt.txt');

    debugStrings.Savetofile(MyProgramPath + 'Mailing\Diagnose.txt');
    debugStrings.free;

    DoppelteNamen.free;
    DoppelteNamenInfo.free;

    DoppelteNamenOrt.free;
    DoppelteNamenInfoOrt.free;

    FullMemo.free;
    progressbar1.position := 0;
    Button1.Caption := 'Start';

    screen.cursor := crdefault;
  end;
end;

procedure TFormPersonenExport.Button3Click(Sender: TObject);
begin
  UserBreak := true;
end;

procedure TFormPersonenExport.Edit2Exit(Sender: TObject);
begin
  edit2.Text := long2date(date2long(edit2.text));
end;

procedure TFormPersonenExport.FormCreate(Sender: TObject);
begin
  edit2.Text := long2date(DatePlus(DateGet, -370));
end;

end.
