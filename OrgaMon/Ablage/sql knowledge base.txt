SQL-Knowledge-Base:
===================
//
// INSERT a ROW:
// ALTER TABLE VISITOR ADD WOW int;
// DROP a ROW:
// ALTER TABLE VISITOR DROP COLUMN WOW;
// DROP A TABLE:
// DROP TABLE <NAME>
// 
// change a field-type or length
// update RDB$FIELDS set
// RDB$FIELD_LENGTH = 50,
// RDB$CHARACTER_LENGTH = 50
// where RDB$FIELD_NAME = 'RDB$366';
// problem: ist bei Kunde "1" RDB$366 = domainof(PERSON.WEB_PWD)

--------
update data

update
 artikel
set
 paket_r = null

----------
new trigger

SET TERM #;
create trigger AR_TRI for AUSGANGSRECHNUNG
Before Insert position 0
as
begin
 NEW.RID = GEN_ID(KONTO_GID,1);
end;
#
SET TERM ;#
COMMIT WORK;


----------
new table 

CREATE TABLE  Entit100
( 
     PK_Entit100 INTEGER NOT NULL,
     Name VARCHAR(50),
        CONSTRAINT PK_Entit100 PRIMARY KEY (PK_Entit100)
)

----------
new record: insert into ENTIT100 (NAME) values ("bello");

----------
autoinc-field: 

a) 
CREATE GENERATOR NK_KUNDE;
SET GENERATOR NK_KUNDE TO 8000;

b)
CREATE TRIGGER CREATE_ID FOR ENTIT100
BEFORE INSERT
POSITION 0
AS BEGIN
 NEW.PK_ENTIT100 = GEN_ID(GENID,1);
END

^

Referenz-Spalten
================

,     (SELECT ISO_KURZZEICHEN FROM
      LAND T WHERE T.RID=P.SPRACHE_R) AS
      SPRACHE_TEXT
select 
·	  NAME,
·	  (select DESCRIPTION from PRODUCETYPE T
·	   where T.TYPE = P.TYPE) as TYPE_DESC,
·	  DESCRIPTION,
·	  PRICE,
·	  QTY
·	from PRODUCE P

-----------

Bei einer View mußt Du anders Vorgehen. Hier ein Beispiel einer meiner
Views. In jeder Tabelle gibt es die Felder ID und Maskenkey und beide werden
meist in einer View benötigt.

CREATE VIEW V_BARTG2(ID, MASKENKEY, BEZ, BEKGR_ID_EINKGRPNR, BKST_ID_EKKOST,
EKKTO,
TOLERANZ, TOLKZ, BENUTZER, GESPEICHERT, BEKGR_MASKENKEY, BKST_MASKENKEY) AS
SELECT A.ID,
A.MASKENKEY,
A.BEZ,
A.BEKGR_ID_EINKGRPNR,
A.BKST_ID_EKKOST,
A.EKKTO,
A.TOLERANZ,
A.TOLKZ,
A.BENUTZER,
A.GESPEICHERT,
B.MASKENKEY,
C.MASKENKEY
FROM BARTG2 A
LEFT OUTER JOIN BEKGR B ON A.BEKGR_ID_EINKGRPNR = B.ID
LEFT OUTER JOIN BKST C ON A.BKST_ID_EKKOST = C.ID;

Im ersten Teil gibst Du Aliasnamen für die Felder an. Diese kannst Du
benennen, wie Du Lustig bist.  Dann in der eigentlichen SELECT-Anweisung
erst die Originalfelder ebenfalls mit Aliasnamen für die Tabelle.
Zur besseren Lesbarkeit des Inhalts einer späteren VIEW-Abfrage setzte ich
die Feldnamen in der View gewöhnlich zusammen, d.h.
die Felder der Haupttabelle bleiben original und die Felder der verbundenen
Tabellen bekommen zusätzlich den Tabellennamen mit einem Unterstrich
vorangestellt ( im Beispiel oben BEKGR_MASKENKEY ), d. h. es wird das Feld
MASKENKEY in der Tabelle BEKGR angezeigt.


Frank Rabold <frank.rabold@t-online.de> schrieb in im Newsbeitrag:
9VMv8S7CAHA.1904@VICTORY...
> Leider ist das auch nicht die Lösung. Die Anführungszeichen habe ich hier
> nur zur Verdeutlichung geschrieben. Der SQL-Befehl lautet:
>
> create view View_Sportwart as
> select Sportwart.ID, Sportwart.Ort, Sportwart.Verein_ID, Sportwart.Name,
>    Sportwart.Vorname, Sportwart.Telefon, Sportwart.Strasse, Sportwart.PLZ,
>    Verein.Name as Verein_Name
> from Sportwart left outer join Verein on Sportwart.Verein_ID = Verein.ID;
>
> Interbase quittiert dies mit folgendem Fehler:
>
> Dynamic SQL Error
> -SQL error code = -607
> -Invalid command
> -must specify column name for view select expression
>
> Mit dieser Meldung kann ich nichts anfangen. Für einen Tip wäre ich
dankbar!
>
> Frank
>
>
> "Gerd Kroll" <Gerd.Kroll@SMB-STRAP.DE> schrieb im Newsbeitrag
> news:4ZDnyxyCAHA.1184@VICTORY...
> > Du warst schon auf dem richtigen Weg. Lass die Anführungszeichen weg.
> >
> > Gerd
> >
> > Frank Rabold <frank.rabold@t-online.de> schrieb in im Newsbeitrag:
> > GADpvOrCAHA.1768@VICTORY...
> > > Hallo,
> > >
> > > ich möchte eine Sicht über zwei Tabellen, die einen gleichen
> Spaltennamen
> > > enthalten, erstellen.
> > >
> > > create view View_Sportwart as
> > > select Sportwart.ID, Sportwart.Ort, Sportwart.Verein_ID,
Sportwart.Name,
> > >    Sportwart.Vorname, Sportwart.Telefon, Sportwart.Strasse,
> Sportwart.PLZ,
> > >    Verein.Name
> > > from Sportwart left outer join Verein on Sportwart.Verein_ID =
> Verein.ID;
> > >
> > > Interbase quittiert diesen Versuch mit folgendem Fehler:
> > >
> > > unsuccessful metadata update
> > > -STORE RDB$RELATION_FIELDS failed
> > > -attempt to store duplicate value (visible to active transactions) in
> > unique
> > > index "RDB$INDEX_15"
> > >
> > > Wenn ich in der SELECT-Anweisung schreibe "Verein.Name as Verein_Name"
> > > erhalte ich auch einen Fehler.
> > > Kann mir jemand erklären, wie man so etwas in SQL formuliert.
> > >
> > > Danke
> > > Frank Rabold
> > >
> > >
> >
> >
>
>

With Query1 do
begin
      first;
      while not eof do
      begin
     Query2.ParamByName('codigo').asstring:=fieldbyname
('IE_produto').asstring;
     Query2.prepare;
                Query2.open;
                Query2.edit;
     Query2.fieldbyname('PR_customedio').asfloat:=
               (Query2.fieldbyname('PR_saldo').asfloat*
                        Query2.fieldbyname('PR_customedio').asfloat)+
                        (fieldbyname('IE_qtdereal').asfloat*
                        fieldbyname('IE_precocompra').asfloat)/
                        (Query2.fieldbyname('PR_saldo').asfloat+
                        fieldbyname('IE_qtdereal').asfloat);
     Query2.post;
     Query2.close;
     next;
        end;
end;


----------------

select ig.rdb$field_name
from rdb$index_segments ig join rdb$indices i
on ig.rdb$index_name = i.rdb$index_name
join rdb$relation_constraints rc
on i.rdb$index_name = rc.rdb$index_name
and rc.rdb$constraint_type = 'PRIMARY KEY'
and rc.rdb$relation_name = :tbl
order by ig.rdb$field_position

C.
--
---------
Claudio Valderrama C.
IT Engineer - Independent consultant - CHILE
Owner of the Interbase WebRing
http://members.tripod.com/cvalde
(No support questions by e-mail, please. Thank you.)

J8 wrote in message <8kfbee$7un6@bornews.borland.com>...
>I need to know which fields make up the primary key for a table.
>
>I think this might work, but I don't know if the rdb$index_id = 1 is enough
>to
>ensure I get the primary key fields.
>
>select rdb$field_name
>from rdb$index_segments
>where rdb$index_name = (select rdb$index_name
>                                         from rdb$indices
>                                         where rdb$relation_name =
>:pTableName
>                                         and rdb$index_id = 1)
>
>Any feedback will be much appreciated.
>
>Mvrgr,
>  Peter
>
>


---------

in procedure:
  declare variable key_id integer;
  ...
  key_id = GEN_ID(gen_table1, 1);
  insert into table1 :key_id, field...
  ...
  update table2 set table_link=:key_id


"DSA-JCR" <info@dsa.es> wrote in message
news:8lubjm$n0b15@bornews.borland.com...
> Hi all:
>
> Well, I mean
>
> I want to do a SP that
> 1.- Insert data in a table. This table has a Unique CODE updated by a
> Generator
> 2.- After insert the data, I must put that CODE in another table in order
to
> link them.
>
> How can I acomplish this ?
>
> Example :
>
> insert into table1 CODE, field1, ....
> update table2 set Table1Link=CODE
>
> thanks in advance
>
> --
> Juan Coruña Rodriguez
> Desarrollo de Software Atlantico SL
> www.dsa.es
>
>


-----

CREATE PROCEDURE EXT_FELV_LOCK (
    ID INTEGER,
    TERMINAL VARCHAR(32))
RETURNS (
    "TERM" VARCHAR(32))
AS
begin
          select terminal
              from bizonylatok_felv
              where id=:id
              for update
              into :term;
          if (term is null) then
          begin
              term = '';
              update bizonylatok_felv set
                  terminal = :terminal
                  where id=:id;
          end
      end

--------
----------------

SET SQL DIALECT 3;
SET NAMES NONE;

CREATE DATABASE 'localhost:D:\projects\firebird\DATABASE.FDB'
USER 'SYSDBA' PASSWORD 'masterke'
PAGE_SIZE 4096
DEFAULT CHARACTER SET NONE;

CREATE TABLE TEST (
    ID      INTEGER NOT NULL,
    LOCKED  INTEGER DEFAULT 0 NOT NULL
);

ALTER TABLE TEST ADD PRIMARY KEY (ID);

SET TERM ^;

CREATE PROCEDURE SP (
    ID INTEGER)
AS
declare variable locked integer;
begin
  select locked from test where id=:id for update into :locked;
end
^

SET TERM ; ^


Statements: 
-----------

INSERT INTO TEST (ID) VALUES (1);

EXECUTE PROCEDURE SP(1);  /* the server crashes here */

--------

shutdown und wieder online setzen...

Andrew Guts wrote:
>
>    Please help. I can not connect to database at all after it has
> been shut down. What is why I am not able to support and develop my
> application. The platform is Super Server 1.5 RC1 for linux.

Doesn't gfix work with
gfix -online localhost:/path_to_db
to make the db available for all users again?

I shutdown a db with this command:
G:\>gfix -shut -attach 0 localhost:f:\temp\toshut.fdb

and later, using sysdba implicitly:
G:\>isql localhost:f:\temp\toshut.fdb
Database:  localhost:f:\temp\toshut.fdb
SQL> show tables;
There are no tables in this database
SQL> show system;
[...]
---------
select Owner, count(*),
  sum(case when status='Validated' then Estimate else 0 end)
  as VTime,
  sum(case when status='Implemented' then Estimate else 0 end)
  as ITime,
  sum(case when status in ('Entered','Approved','Questioned') then Estimate
else 0 end)
  as UTime
from Req where proj = :PROJ and deliv = :DELIV
group by Owner

----------
 Kurs Softwareentwicklung/Datenbanksysteme, SS 2003, Prof. Dr. B. Bartning
             - Angaben ohne Gewähr für Richtigkeit -

=============
SQL allgemein
=============

Vereinbarung über Schreibweise

   GROSSBUCHSTABEN: terminale Symbole, d. h. zeichenweise übernehmen
                    (dabei gleichgültig, ob Klein- oder Großbuchstaben)
   Kleinbuchstaben: nichtterminale Symbole, d. h. sinngemäß (interpretiert)
                    übernehmen
   Gemischte Groß-/Kleinschreibung: im Prinzip freier Name,
                    Empfehlung (zur Vereinheitlichung hier beim Üben):
                    Übernahme in genau derselben Rechtschreibung
   A/B              entweder A oder B (exklusives Oder)
   [..]             optional
   ..               irgendwelche Einsetzung
   ...              Davorstehendes kann mehrfach wiederholt werden
   //               Zeilenendkommentar (NUR in dieser Beschreibung)

Stringkonstante bei Interbase: in Begrenzern  '...' oder "...".

Datentypen Interbase (Auswahl):
----------------------------
CHAR(len)
DATE                           //nicht Std.-SQL
NUMERIC/DECIMAL(len[,dec])     //wenn dec fehlend: 0; nicht Standard-SQL
u. a. lt. Vorlesung

Tabellen-Operationen
--------------------
  //Erstellen einer neuen Tabelle:
CREATE TABLE tabname (spname typ [,spname typ]...);
  //Löschen einer Tabelle (VORSICHT!) - einschl. Synonyme, Indexe:
DROP TABLE tabname;
  //Hinzufügung Spalten:
ALTER TABLE ..;

  //Erstellen Synonyme:
CREATE SYNONYM synname FOR tabname;  // tabname: Tabelle, auch Sicht, Synonym
DROP SYNONYM synname;

  //Sichten:
CREATE VIEW sichtname [(spaltenliste)] AS SELECT klauseln;
DROP VIEW sichtname;

  //Einfügen von neuen Zeilen:
INSERT INTO tabname [(spaltenliste)] VALUES (werteliste);
INSERT INTO tabname SELECT klauseln;  // Übername Werte aus SELECT-Befehl
  //Aktualisieren von Zeilen:
UPDATE tabname SET spname = ausdr [,spname = ausdr]... [WHERE klausel];
  //Löschen von Zeilen:
DELETE FROM tabname [WHERE klausel];
  //Vorsicht ohne WHERE! Löschen ALLER Zeilen!
SELECT
------
SELECT  * / [ALL/DISTINCT]spaltenliste
  FROM tabellenliste
  [WHERE selectionsbedingung]
  [GROUP BY gruppenauswahl]
4  [HAVING gruppenauswahlbedingung]
  [ORDER BY ordungskriterium];

Zu GROUP BY:
  wenn vorh., dann in gruppen_auswahl UND in spaltenliste die gleichen
  Spalten notwendig (nicht unbed. gleiche Reihenfolge),
  zusätzl. in spaltenliste erlaubt: Gruppenfunktionen und Konstanten

Unterabfragen (Auswahl als Beipiel)
-----------------------------------
  //Genau EIN Ergebnis in Unterabfrage erlaubt:
SELECT spaltenliste
FROM tabliste
WHERE spwert =
     (SELECT spalte/gruppenfunktion
      FROM tabname
      WHERE bedingung)
[ORDER BY ..];

  //Beliebig viele Ergebnisse (auch 0) in Unterabfrage erlaubt:
SELECT spaltenliste
FROM tabliste
WHERE [NOT] EXISTS
     (SELECT *
      FROM tabname
      WHERE bedingung);

  //Mehrere Ergebnisse in Unterabfrage erlaubt:
SELECT spaltenliste
FROM tabliste
WHERE spwert [NOT] IN
     (SELECT spalte/gruppenfunktion
      FROM tabname
      WHERE bedingung);

Operatoren, Funktionen
----------------------
Hierarchie:      * /
                 + -
                 verglOp
                 NOT
                 AND
                 OR

verglOp:         = <> > >= < <=   und  !verglOp
   dazu:         a [NOT] BETWEEN x AND y
                      (ohne NOT äqu. zu:   a >= x AND a <= y)
                 a [NOT] IN (x1,x2,x3)
                      (ohne NOT äqu. zu:   a = x1 OR a = x2 OR a = x3)
                 a [NOT] LIKE x
                      für Strings mit Platzhaltern _ (1 Z.) und % (>=0 Z.)
Gruppenfunktionen:
------------------
  COUNT()      //alle Typen
  MIN(),MAX()  //Zeichen, Datum, numerisch
  SUM(),AVG()  //numerisch
 speziell:
  COUNT(*)                      //alle Zeilen zählen
  COUNT(spname)                 //alle Zeilen mit spname zählen
  COUNT (DISTINCT spname)       //alle Zeilen mit unterschiedl. Werten
                                //in spname zählen

Allg. SQL-Funktionen:
  UPPER(string)
  CAST(wert AS datentyp)        //Umwandlung wert in datentyp
                                //(viele möglichen Umwandlungen)

=============
Interbase-SQL
=============

  datum+zahl            //um zahl Tage späteres Datum
  datum2-datum1         //Anzahl Tage zwischen den Datumangaben
  str1||str2            //Stringverkettungsoperator

SQL-Fenster: wird in Vorlesung/Übung vorgestellt.

Eingestellt für jeden Benutzer auf dem Server nt-newton.fho-emden.de:
Benutzername:  SWnn     (nn fortlaufende Nummer, wird jedem bekanntgegeben)
Erstpasswort:   -- wird mitgeteilt --
Registrieren der (eigenen) Datenbank auf Server nt-newton (Menü
  Database\Register):  /datenbank/swe/s03/swnn.gdb  (mit nn eigene Nummer),
  Alias (am besten): swnn - oder frei lassen.
Nach Sitzung z B. "Unregister" (Menü Database), aber nicht unbedingt nötig.

ACHTUNG! Jeder Benutzer hat lesenden Zugriff auf die Datenbanken
aller Benutzer! (Änderung möglich.)

Passwortänderung: Extra-Programm "ibpasswort" außerhalb der Konsole
(bisheriges Passwort, dann bei Änderung 2x neues Passwort eingeben).
Bei Vergessen Paßwort: bitte bei Ba. oder Herrn Bender melden.

Installieren Interbase-SQL-Server auf eigenem (Windows-)Rechner (free ware):
Von CD das Programm \servers\firebird\superserver win\firebird.....exe starten.
Client-Installation: \tools\ibconsole\ibconsole...exe (oder iboconsole...exe) starten.
Später Programm IBConsole starten (als User "SYSDBA" mit Passwort "masterkey"
- kann danach geändert werden);
"Interbase Servers" aktivieren, über Menü Server\Register lokalen Server
  registrieren, "Interbase Servers\Local Servers\Databases" aktivieren,
  dann eigene Datenbank schaffen (Menü Datenbank\Create Database) oder
  Aufgabendatenbank "fhoow" importieren (s.u.).
Benutzer: über "Interbase Servers\Local Server\Users"
  Benutzer erzeugen oder ändern (z. B. auch Passwortänderung).
Dokumentation: PDF-Dateien aus Verzeichneis \servers\interbase\doc auf der CD kopieren.
Installieren der Aufgabendatenbank fhoow (sobald sie erstellt ist):
  Datei fhoow.gbk holen (z. B. über Leitseite dieser Vorlesung), sie auf
  eigenen Rechner kopieren, dann diese Datenbank importieren (Console:
  Database\Maintanance\Backup/Restore\Restore, hinein in zu erzeugende
  Datei fhoow.gdb)


========
Aufgaben
========

Erstellung der Daten - DIE SCHREIBWEISE DER SPALTENNAMEN GENAU ÜBERNEHMEN!! -

CREATE TABLE    Stud
         (MNr      NUMERIC(4,0),
          Name     CHAR(15),
          Vorname  CHAR(12),
          Plz      CHAR(5),
          Ort      CHAR(15),
          Anfang   DATE,
          Fb       CHAR(1),        // Werte laut Absprache
          GehWu    NUMERIC(8,2)    // (späterer) Gehaltswunsch
         );

CREATE TABLE    Vorles
         (Kenn      CHAR(4),
          Name      CHAR(20),
          Sem       NUMERIC(1,0),  // 1..7
          Pruef     CHAR(1),       // K, M, R, E
          Dozent    CHAR(15)
         );

INSERT .. // für beide Tabellen

Erste Probeschritte:
--------------------
SELECT ..       // Beispiele:
  Projektion    SELECT * FROM Stud;
                SELECT Ort,Plz,Fb FROM Stud ORDER BY Plz; //oder: ORDER BY 2
                SELECT Plz FROM Stud ORDER BY 1;
                SELECT DISTINCT Plz FROM Stud;
  Selektion     .. WHERE klausel;
    Klausel z.B.: Name > 'F', Fb = 'N', Anfang<cast('01.01.89' as date))
                Plz='26723' OR Plz='26721', BETWEEN .., IN .., LIKE ..
  Virtuelle Sp. SELECT name||vorname||' -','ist Stud.' FROM Stud;
       oder:    13*GehWu // (u.a.)
  Gruppenfkt.   SELECT COUNT(*),MAX(GehWu),MIN(Anfang),
                   AVG(cast('01.05.2001' as date)-Anfang) FROM Stud;
  Gruppierung   SELECT Fb,MAX(GehWu),MIN(Anfang),COUNT(*) FROM Stud
                   GROUP BY Fb;
                SELECT Plz,COUNT(*) FROM Stud GROUP BY Plz
                   HAVING COUNT(Plz)>5;
                (oder: HAVING MAX(GehWu > 10000 oder MAX(Name) > 'S' o.a.)
     zus. mit ORDER BY (mit num. Klausel)

UPDATE ..       // Beispiel:
                UPDATE Stud SET GehWu = 8760.9
                   WHERE MNr = .. (BETWEEN .. AND ..);

DELETE ..      // Beispiel:
                DELETE FROM Stud WHERE Plz = '26723';

Weitere Aufgaben s. Folgeblatt

--------

  
Support
 Interbase Search
 Mailing Lists
 NewsGroups


FAQs
  Delphi
  InterBase
  Oracle


About
  MER Systems
  This Site

Inprise
  Press Releases
  MER Case Study 

Powered by 
  RedHat Linux 5.1
  InterBase 5.0
  InterClient 1.5
  JavaWebServer


 Retrieving Information about InterBase System Objects
 Retrieving Information about InterBase System Objects

 Last modified: 4/22/1998
 Author: Brett Bandy, Wyliam Holder

 Issue:

 Retrieving Information from the System tables

 Objects:
 --------------
 * Tables/Views format
 * Triggers on a table
 * primary/foreign keys and table constraints
 * domains
 * Indices
 * Procedures
 * UDFs
 * Generators
   

 Solution:

 Retrieving Information about a Table or View

 This example uses the employee table in the employee database
 in the examples directory.

 ------------------------------------------------------------------------------
  This select will return the field name, field type, field length, whether it 
  is nullable, and the column check constraints for a table or view
 ------------------------------------------------------------------------------
 select r.rdb$field_name, 
          t.rdb$type_name,
          f.rdb$field_length,
          r.rdb$null_flag,
          f.rdb$validation_source 

 from    rdb$relation_fields r, rdb$types t, rdb$fields f 

 where   r.rdb$relation_name='EMPLOYEE' and 
          f.rdb$field_name=r.rdb$field_source and 
          t.rdb$field_name='RDB$FIELD_TYPE' and 
          f.rdb$field_type=t.rdb$type;

 --------------------------------------------------
 This select returns the source for a view
 --------------------------------------------------
 select rdb$view_source

 from    rdb$relations

 where   rdb$view_source=þPHONE_LISTþ;

 ------------------------------------------------------------------------------
 This select returns the primary and foreign keys for a table and the fields it 
 is defined on
 ------------------------------------------------------------------------------
 select r.rdb$constraint_type, 
          i.rdb$field_name 

 from    rdb$relation_constraints r, rdb$index_segments i 

 where   r.rdb$relation_name='EMPLOYEE' and 
          (r.rdb$constraint_type='PRIMARY KEY' 
         or r.rdb$constraint_type=þFOREIGN KEYþ) and 
          r.rdb$index_name=i.rdb$index_name;

 -------------------------------------------------------------
 This select returns the check constraints on a table
 -------------------------------------------------------------
 select r.rdb$constraint_name, 
          r.rdb$constraint_type, 
          t.rdb$trigger_source 

 from    rdb$relation_constraints r, rdb$check_constraints c, rdb$triggers t 

 where   r.rdb$constraint_name=c.rdb$constraint_name and 
          c.rdb$trigger_name=t.rdb$trigger_name and 
          r.rdb$relation_name='EMPLOYEE';

 ------------------------------------------------------------------------------
 This select returns all the triggers for a given table
 ------------------------------------------------------------------------------
 select t.rdb$trigger_name, 
          t.rdb$trigger_sequence, 
          y.rdb$type_name, 
          t.rdb$trigger_inactive 

 from    rdb$triggers t, rdb$types y 

 where   t.rdb$relation_name='EMPLOYEE' and 
          t.rdb$trigger_name not like 'CHECK%' and 
          y.rdb$field_name='RDB$TRIGGER_TYPE' and 
          t.rdb$trigger_type=y.rdb$type;

 ==============================================================================

 Retrieving Information on a Domain

 ------------------------------------------------------------------
 This select returns the name, datatype and length, nullable, and 
 check constraints on a domain
 ------------------------------------------------------------------
 select f.rdb$field_name, 
          t.rdb$type_name, 
          f.rdb$field_length, 
          f.rdb$null_flag, 
          f.rdb$default_source, 
          f.rdb$validation_source 

 from    rdb$fields f, rdb$types t 

 where   f.rdb$field_name='JOBCODE' and 
          f.rdb$field_type=t.rdb$type and 
          t.rdb$field_name='RDB$FIELD_TYPE'

 ========================================================================

 Retrieving Information on a Databaseþs Indices

 -----------------------------------------------------------------
 This select returns the indices defined for a database 
 -----------------------------------------------------------------
 select i.rdb$index_name, 
          i.rdb$unique_flag, 
          i.rdb$relation_name, 
          s.rdb$field_name 

 from    rdb$indices i, rdb$index_segments s 

 where   i.rdb$index_name=s.rdb$index_name and 
          i.rdb$index_name not like 'RDB$%';  (exclude this from where clause if
                                                     want system indices)

 ========================================================================

 Retrieving Information on a Procedure

 -----------------------------------------------
 This select returns the source for a procedure
 -----------------------------------------------
 select rdb$procedure_source 

 from    rdb$procedures 

 where   rdb$procedure_name = 'ADD_EMP_PROJ';

 -------------------------------------------------------------------------
 This select returns the parametersþ name, datatype, datatype length, and
 weather it is an input or output parameter 
 -------------------------------------------------------------------------
 select p.rdb$parameter_name, 
          p.rdb$parameter_type, 
          t.rdb$type_name, 
          f.rdb$field_length 

 from    rdb$procedure_parameters p, rdb$fields f, rdb$types t 

 where   p.rdb$field_source=f.rdb$field_name and
          p.rdb$procedure_name='ADD_EMP_PROJ' and 
          f.rdb$field_type=t.rdb$type and 
          t.rdb$field_name='RDB$FIELD_TYPE';

 ==============================================================================

 Retrieving Information on User Defined Functions

 --------------------------------------------------------------------
 This select returns a functions name, module name, and entry point
 --------------------------------------------------------------------
 select f.rdb$function_name, 
          f.rdb$module_name, 
          f.rdb$entrypoint 

 from    rdb$functions f 

 where   rdb$function_name='UPPER';

 -------------------------------------------------------
 This select returns the returning value of a function
 -------------------------------------------------------
 select a.rdb$mechanism,
          t.rdb$type_name,
          a.rdb$field_length

 from    rdb$function_arguments a, rdb$functions f, rdb$types t

 where   f.rdb$function_name=a.rdb$function_name and
          t.rdb$field_name=þRDB$FIELD_TYPEþ and
          t.rdb$type=a.rdb$field_type and
          f.rdb$function_name=þUPPERþ and
          a.rdb$argument_position=f.rdb$return_argument;

 --------------------------------------------------
 This select returns the parameters of a function 
 --------------------------------------------------
 select a.rdb$argument_position,
          a.rdb$mechanism,
          t.rdb$type_name,
          a.rdb$field_length

 from    rdb$function_arguments a, rdb$functions f, rdb$types t

 where   f.rdb$function_name=a.rdb$function_name and
          t.rdb$field_name=þRDB$FIELD_TYPEþ and
          t.rdb$type=a.rdb$field_type and
          f.rdb$function_name=þUPPERþ and
          a.rdb$argument_position<>f.rdb$return_argument;

 ==============================================================================

 Retrieving Information about Exceptions

 -----------------------------------------------------------------
 This select returns the exception name, exception message, and
 the name and type of object that uses the exception
 -----------------------------------------------------------------
 select e.rdb$exception_name, 
          e.rdb$message, 
          d.rdb$dependent_name, 
          t.rdb$type_name 

 from    rdb$exceptions e, rdb$dependencies d, rdb$types t 

 where   e.rdb$exception_name=d.rdb$depended_on_name and
          d.rdb$dependent_type=t.rdb$type and 
          rdb$field_name='RDB$OBJECT_TYPE';

 ==============================================================================

 Retrieving Information about Generators

 ---------------------------------------------
 This select shows the databaseþs generators
 ---------------------------------------------
 select rdb$generator_name 

 from    rdb$generators 

 where   rdb$system_flag is null;

   


Information provided by Interbase Corporation
 
Back To Top
Home Page   
Copyright © 2002 MER Systems Inc.. 


auf dem Server sehen, ob es clientverbindungen gibt...

netstat -anp | grep 3050
ps -e -f | grep fb_
