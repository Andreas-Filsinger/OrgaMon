unit uPSI_Funktionen_Basis;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_Funktionen_Basis = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_Funktionen_Basis(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_Funktionen_Basis_Routines(S: TPSExec);

procedure Register;

implementation


uses
   gplists
  ,globals
  ,Funktionen.Basis
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_Funktionen_Basis]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_Funktionen_Basis(CL: TPSPascalCompiler);
begin
 CL.AddDelphiFunction('Function e_r_IsRID( FieldName : string; RID : integer) : boolean');
 CL.AddDelphiFunction('Function e_r_sql( s : string) : integer');
 CL.AddDelphiFunction('Function e_r_sql2( s : string; sl : TStringList) : integer;');
 CL.AddDelphiFunction('Function e_r_sqlt( s : string) : TStringList');
 CL.AddDelphiFunction('Function e_r_GEN( GenName : string) : integer');
 CL.AddDelphiFunction('Function e_w_GEN( GenName : string) : integer');
 CL.AddDelphiFunction('Function e_r_now : TdateTime');
 CL.AddDelphiFunction('Function e_r_Kontext : string');
 CL.AddDelphiFunction('Function e_r_sqls( s : string) : string');
 CL.AddDelphiFunction('Function e_r_sqlb( s : string) : boolean');
 CL.AddDelphiFunction('Function e_r_sqld( s : string; ifnull : double) : double');
 CL.AddDelphiFunction('Function e_r_sqlsl( s : string) : TStringList');
 CL.AddDelphiFunction('Function e_r_sqlslo( s : string) : TStringList');
// CL.AddDelphiFunction('Function e_r_sqlm( s : string; m : TgpIntegerList) : TgpIntegerList');
 CL.AddDelphiFunction('Function e_r_OLAP( OLAP : TStringList; Params : TStringList) : TStringList');
 CL.AddDelphiFunction('Procedure e_x_sql( s : string)');
 CL.AddDelphiFunction('Procedure e_x_update( s : string; sl : TStringList)');
 CL.AddDelphiFunction('Procedure e_x_sql2( s : TStrings);');
 CL.AddDelphiFunction('Procedure e_w_dereference( RID : integer; TableN, FieldN : string; DeleteIt : boolean)');
 CL.AddDelphiFunction('Function e_r_BasePlug : TStringList');
 CL.AddDelphiFunction('Function e_r_BearbeiterKuerzel : integer');
 CL.AddDelphiFunction('Function e_w_Medium : string');
 CL.AddDelphiFunction('Procedure e_a_Infos( s : TStrings)');
 CL.AddDelphiFunction('Function cAusgabeArt_Aufnahme_MP3 : TDOM_Reference');
 CL.AddDelphiFunction('Function e_r_MusikerName( MUSIKER_R : integer) : string');
 CL.AddDelphiFunction('Function e_r_MusikerNachName( MUSIKER_R : integer) : string');
 CL.AddDelphiFunction('Function e_r_MusikerNurNachName( MUSIKER_R : integer) : string');
 CL.AddDelphiFunction('Function e_r_MusikerUeber( MUSIKER_R : integer) : string');
 CL.AddDelphiFunction('Function e_r_MusikerCache : TStringList');
 CL.AddDelphiFunction('Function e_r_MusikerNachnamen : TStringList');
// CL.AddDelphiFunction('Function e_r_MusikerGroup( MUSIKER_R : integer) : TList');
 CL.AddDelphiFunction('Function e_r_MusikerGroupRID( RID : integer) : integer');
// CL.AddDelphiFunction('Function e_r_MusikerWerke( MUSIKER_R : integer) : TList');
 CL.AddDelphiFunction('Procedure e_w_MusikerChangeRef( FROM_RID, TO_RID : string)');
 CL.AddDelphiFunction('Function e_w_MusikerCheckCreate( MusikerListe : string) : integer');
 CL.AddDelphiFunction('Procedure InvalidateCache_Musiker');
 CL.AddDelphiFunction('Procedure InvalidateCache_Laender');
 CL.AddDelphiFunction('Function e_r_LaenderRIDfromALT( ALT : string) : integer');
 CL.AddDelphiFunction('Function e_r_LaenderRIDfromISO( ISO : string) : integer');
 CL.AddDelphiFunction('Function e_r_LaenderISO( RID : integer) : string');
 CL.AddDelphiFunction('Function e_r_LaenderPost( RID : integer) : string');
 CL.AddDelphiFunction('Function e_r_LaenderInternational( RID : integer) : string');
 CL.AddDelphiFunction('Function e_r_LaenderOrtFormat( RID : integer) : string');
 CL.AddDelphiFunction('Function e_r_LaenderCache : TStringList');
 CL.AddDelphiFunction('Function enCrypt_Hex( s : string) : string');
 CL.AddDelphiFunction('Function deCrypt_Hex( s : string) : string');
 CL.AddDelphiFunction('Function SysDBApassword : string');
 CL.AddDelphiFunction('Function e_r_ServerTime : TDateTime');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Procedure e_x_sql2_P( s : TStrings);
Begin e_x_sql(s); END;

(*----------------------------------------------------------------------------*)
Function e_r_sql2_P( s : string; sl : TStringList) : integer;
Begin Result := e_r_sql(s, sl); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_Funktionen_Basis_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@e_r_IsRID, 'e_r_IsRID', cdRegister);
 S.RegisterDelphiFunction(@e_r_sql, 'e_r_sql', cdRegister);
 S.RegisterDelphiFunction(@e_r_sql2_p, 'e_r_sql2', cdRegister);
 S.RegisterDelphiFunction(@e_r_sqlt, 'e_r_sqlt', cdRegister);
 S.RegisterDelphiFunction(@e_r_GEN, 'e_r_GEN', cdRegister);
 S.RegisterDelphiFunction(@e_w_GEN, 'e_w_GEN', cdRegister);
 S.RegisterDelphiFunction(@e_r_now, 'e_r_now', cdRegister);
 S.RegisterDelphiFunction(@e_r_sqls, 'e_r_sqls', cdRegister);
 S.RegisterDelphiFunction(@e_r_sqlb, 'e_r_sqlb', cdRegister);
 S.RegisterDelphiFunction(@e_r_sqld, 'e_r_sqld', cdRegister);
 S.RegisterDelphiFunction(@e_r_sqlsl, 'e_r_sqlsl', cdRegister);
 S.RegisterDelphiFunction(@e_r_sqlslo, 'e_r_sqlslo', cdRegister);
// S.RegisterDelphiFunction(@e_r_sqlm, 'e_r_sqlm', cdRegister);
 S.RegisterDelphiFunction(@e_r_OLAP, 'e_r_OLAP', cdRegister);
 S.RegisterDelphiFunction(@e_x_sql, 'e_x_sql', cdRegister);
 S.RegisterDelphiFunction(@e_x_update, 'e_x_update', cdRegister);
 S.RegisterDelphiFunction(@e_x_sql2_P, 'e_x_sql2', cdRegister);
 S.RegisterDelphiFunction(@e_w_dereference, 'e_w_dereference', cdRegister);
 S.RegisterDelphiFunction(@e_r_BasePlug, 'e_r_BasePlug', cdRegister);
 S.RegisterDelphiFunction(@e_r_Bearbeiter, 'e_r_Bearbeiter', cdRegister);
 S.RegisterDelphiFunction(@e_r_BearbeiterKuerzel, 'e_r_BearbeiterKuerzel', cdRegister);
 S.RegisterDelphiFunction(@e_w_Medium, 'e_w_Medium', cdRegister);
 S.RegisterDelphiFunction(@e_a_Infos, 'e_a_Infos', cdRegister);
 S.RegisterDelphiFunction(@cAusgabeArt_Aufnahme_MP3, 'cAusgabeArt_Aufnahme_MP3', cdRegister);
 S.RegisterDelphiFunction(@e_r_MusikerName, 'e_r_MusikerName', cdRegister);
 S.RegisterDelphiFunction(@e_r_MusikerNachName, 'e_r_MusikerNachName', cdRegister);
 S.RegisterDelphiFunction(@e_r_MusikerNurNachName, 'e_r_MusikerNurNachName', cdRegister);
 S.RegisterDelphiFunction(@e_r_MusikerUeber, 'e_r_MusikerUeber', cdRegister);
 S.RegisterDelphiFunction(@e_r_MusikerCache, 'e_r_MusikerCache', cdRegister);
 S.RegisterDelphiFunction(@e_r_MusikerNachnamen, 'e_r_MusikerNachnamen', cdRegister);
// S.RegisterDelphiFunction(@e_r_MusikerGroup, 'e_r_MusikerGroup', cdRegister);
 S.RegisterDelphiFunction(@e_r_MusikerGroupRID, 'e_r_MusikerGroupRID', cdRegister);
// S.RegisterDelphiFunction(@e_r_MusikerWerke, 'e_r_MusikerWerke', cdRegister);
 S.RegisterDelphiFunction(@e_w_MusikerChangeRef, 'e_w_MusikerChangeRef', cdRegister);
 S.RegisterDelphiFunction(@e_w_MusikerCheckCreate, 'e_w_MusikerCheckCreate', cdRegister);
 S.RegisterDelphiFunction(@InvalidateCache_Musiker, 'InvalidateCache_Musiker', cdRegister);
 S.RegisterDelphiFunction(@InvalidateCache_Laender, 'InvalidateCache_Laender', cdRegister);
 S.RegisterDelphiFunction(@e_r_LaenderRIDfromALT, 'e_r_LaenderRIDfromALT', cdRegister);
 S.RegisterDelphiFunction(@e_r_LaenderRIDfromISO, 'e_r_LaenderRIDfromISO', cdRegister);
 S.RegisterDelphiFunction(@e_r_LaenderISO, 'e_r_LaenderISO', cdRegister);
 S.RegisterDelphiFunction(@e_r_LaenderPost, 'e_r_LaenderPost', cdRegister);
 S.RegisterDelphiFunction(@e_r_LaenderInternational, 'e_r_LaenderInternational', cdRegister);
 S.RegisterDelphiFunction(@e_r_LaenderOrtFormat, 'e_r_LaenderOrtFormat', cdRegister);
 S.RegisterDelphiFunction(@e_r_LaenderCache, 'e_r_LaenderCache', cdRegister);
 S.RegisterDelphiFunction(@enCrypt_Hex, 'enCrypt_Hex', cdRegister);
 S.RegisterDelphiFunction(@deCrypt_Hex, 'deCrypt_Hex', cdRegister);
 S.RegisterDelphiFunction(@SysDBApassword, 'SysDBApassword', cdRegister);
 S.RegisterDelphiFunction(@e_r_ServerTime, 'e_r_ServerTime', cdRegister);
end;

 
 
{ TPSImport_Funktionen_Basis }
(*----------------------------------------------------------------------------*)
procedure TPSImport_Funktionen_Basis.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_Funktionen_Basis(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_Funktionen_Basis.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_Funktionen_Basis_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
