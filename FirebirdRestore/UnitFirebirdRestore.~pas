unit UnitFirebirdRestore;

interface


uses
  Windows, Messages, SysUtils,
  Variants, Classes, Graphics,
  Controls, Forms, Dialogs,
  StdCtrls, IBServices;

type
  TFormFirebirdRestore = class(TForm)
    Memo1: TMemo;
    IBRestoreService1: TIBRestoreService;
    procedure FormCreate(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
  private
    { Private-Deklarationen }
    ProcessData: boolean;
    ReplaceVolumes: TStringList;
    TheCommandLine: string;
    EditIniMode: boolean;
    MaxSetting: integer;
  public
    { Public-Deklarationen }
    iServerName: string;
    iShareRoot: string;
    iBackupName: string;
    iNewDatabaseFName: string;
    iDBName: string;
    iSYSDBApassword: string;
    iRestoreDest: string;
    function IniFName: string;
  end;

var
  FormFirebirdRestore: TFormFirebirdRestore;

implementation

uses
  math, anfix32, IniFiles;

{$R *.dfm}

const
  Version: single = 1.010; // ..\..\rev\FirebirdRestore.rev

procedure TFormFirebirdRestore.FormCreate(Sender: TObject);
var
  n: integer;
  MyINi: TIniFile;
  Setting: string;
  LocationLength: integer;
  LocationPreFix: string;
  BackupLocation: string;
  DBLocation: string;

begin

  //
  ReplaceVolumes := TStringList.create;
  Caption := 'Firebird Restore Rev ' + RevToStr(Version);

  //
  MaxSetting := 0;
  MyIni := TIniFile.create(iniFName);
  with MyIni do
  begin
    for n := 0 to 30 do
    begin
      Setting := noblank(ReadString('System', inttostr(n), ''));
      if (Setting <> '') then
      begin
        ReplaceVolumes.add(Setting);
        MaxSetting := max(MAxSetting, n);
      end;
    end;
  end;
  MyIni.free;

  //
  TheCommandLine := paramstr(1);
  if (TheCommandLine <> '') then
  begin

    ProcessData := false;
    for n := 0 to pred(ReplaceVolumes.count) do
    begin
      LocationPreFix := nextp(ReplaceVolumes[n], ',', 0);
      if pos(LocationPreFix, TheCommandLine) = 1 then
      begin
        LocationLength := length(LocationPreFix);
        BackupLocation := copy(TheCommandLine, succ(LocationLength), MaxInt);
        ersetze('\', '/', BackupLocation);
        DBLocation := BackupLocation;
        ersetze('.fbak', '.fdb', DBLocation);

        //
        iNewDatabaseFName := ExtractFileName(TheCommandLine);
        ersetze('.fbak', '.fdb', iNewDatabaseFName);

        // Parameter aus ini Dazulesen
        iServerName := nextp(ReplaceVolumes[n], ',', 1);
        iShareRoot := nextp(ReplaceVolumes[n], ',', 2);

        iSYSDBApassword := nextp(ReplaceVolumes[n], ',', 3);
        if (iSYSDBApassword = '') then
          iSYSDBApassword := 'masterkey';
        iRestoreDest := nextp(ReplaceVolumes[n], ',', 4);

        // Berechnete DateiNamen
        iBackupName := iShareRoot + BackupLocation;
        if (iRestoreDest <> '') then
          iDBName := iRestoreDest + iNewDatabaseFName
        else
          iDBName := iShareRoot + DBLocation;

        //

        ProcessData := true;
        break;
      end;
    end;

    if not (ProcessData) then
    begin

      LocationPreFix := copy(TheCommandLine, 1, 3);
      LocationLength := length(LocationPreFix);
      BackupLocation := copy(TheCommandLine, succ(LocationLength), MaxInt);
      ersetze('\', '/', BackupLocation);
      DBLocation := BackupLocation;
      ersetze('.fbak', '.fdb', DBLocation);

      if FisNetwork(LocationPreFix) then
      begin
        Showmessage('Fehler: Zu wenig Information über ' + LocationPreFix + #13 +
          'Bitte vervollständigen Sie die Angaben' + #13 +
          '<host>,<rootdir>' + #13 +
          'ganz unten in der ini-Datei!');
        EditIniMode := true;
        memo1.Lines.LoadFromFile(IniFName);
        memo1.Lines.add(inttostr(MaxSetting + 1) + '=' + LocationPreFix + ',<host>,<rootdir>,masterkey');
      end else
      begin
        if (iServerName = 'local') then
          iServerName := ''
        else
          iServerName := '127.0.0.1';
        iDBName := LocationPreFix + DBLocation;
        iBackupName := LocationPreFix + BackupLocation;
        ProcessData := true;
      end;

    end;

  end else
  begin
    EditIniMode := true;
    memo1.Lines.LoadFromFile(IniFName);
  end;
end;

procedure TFormFirebirdRestore.FormActivate(Sender: TObject);
var
  ErrorMsg: string;
  OneLine: string;
  ErrorFlag: boolean;
begin
  if ProcessData then
  begin
    ProcessData := false;
    ErrorMsg := '';
    ErrorFlag := false;
    //
    with IBRestoreService1 do
    begin
      ServerName := iServerName;
      if (ServerName <> '') then
        Protocol := TCP
      else
        Protocol := Local;

      PageSize := 16384;
      LoginPrompt := False;

      Params.clear;
      Params.Add('user_name=SYSDBA');
      Params.Add('password=' + iSYSDBApassword);

      Memo1.Lines.Add('SERVER=' + iServerName);
      Memo1.Lines.Add('READ=' + iBackupName);
      Memo1.Lines.add('WRITE=' + iDBName);
      Memo1.Lines.Add('');

      try
        Verbose := True;
        DatabaseName.add(iDBName);
        BackupFile.add(iBackupNAme);
        application.processmessages;
        Active := true;
        ServiceStart;
        repeat
          try
            while not Eof do
            begin
              OneLine := GetNextLine;

              // SF Bug #
              ersetze(#10, '', OneLine);

              // SF Bug #
              OneLine := cutrblank(OneLine);

              if ErrorFlag or (pos('ERROR:', OneLine) > 0) then
              begin
                ErrorMsg := ErrorMsg + #13 + OneLine;
                ErrorFlag := true;
              end;

              Memo1.Lines.Add(OneLine);
              application.processmessages;
            end;
          except
            on E: Exception do
            begin
              exitcode := 1;
              ErrorMsg := ErrorMsg + e.message;
            end;
          end;
        until eof;


      except
        on E: Exception do
        begin
          exitcode := 1;
          ErrorMsg := ErrorMsg + e.message;
        end;
      end;
      Active := False;
    end;
    if (exitCode = 0) and (ErrorMsg = '') then
      close
    else
      ShowMessage('FEHLER:' + #13 + ErrorMsg);
  end;
end;

procedure TFormFirebirdRestore.FormDestroy(Sender: TObject);
begin
  if EditIniMode then
    if doit('Einstellungen jetzt speichern') then
      memo1.lines.savetofile(IniFName);
end;

function TFormFirebirdRestore.IniFName: string;
begin
  result := ExtractFilePath(application.exename) + 'FirebirdRestore.ini';
end;

end.

